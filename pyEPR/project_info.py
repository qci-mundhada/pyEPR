"""
Main interface module to use pyEPR.

Contains code to conenct to Ansys and to analyze HFSS files using the EPR method.

This module handles the micowave part of the analysis and conenction to

Further contains code to be able to do autogenerated reports,

Copyright Zlatko Minev, Zaki Leghtas, and the pyEPR team
2015, 2016, 2017, 2018, 2019, 2020
"""

from __future__ import print_function  # Python 2.7 and 3 compatibility

import sys
from pathlib import Path

import pandas as pd

from . import Dict, ansys, config, logger
from .toolbox.pythonic import get_instance_vars


class ProjectInfo(object):
    """
    Class containing options and information about the manipulation and analysis in HFSS.

    Junction info:
    -----------------------
        self.junctions : OrderedDict()

        A Josephson tunnel junction has to have its parameters specified here for the analysis.
        Each junction is given a name and is specified by a dictionary.
        It has the following properties:

            `Lj_variable`: Name of HFSS variable that specifies junction inductance Lj defined
                        on the boundary condition in HFSS. DO NOT USE Global names that start
                        with $.
            `rect`:     Name of HFSS rectangle on which lumped boundary condition is specified.
            `line`:     Name of HFSS polyline which spans the length of the recntalge.
                        Used to define the voltage across the junction.
                        Used to define the current orientation for each junction.
                        Used to define sign of ZPF.
            `length`:   Length in HFSS of the junction rectangle and line
                        (specified in meters). You can use epr.parse_units('100um')
            `Cj_variable` : Experimental. Optional.
                        Name of HFSS variable that specifies junction inductance Cj defined
                        on the boundary condition in HFSS. DO NOT USE Global names that start
                        with $.

        Example definition:

        ..code-block python

            # Define a single junction
            pinfo = ProjectInfo('')
            pinfo.junctions['j1'] = {'Lj_variable' : 'Lj1',
                         'rect'        : 'JJrect1',
                         'line'        : 'JJline1',
                         'length'      : parse_units('50um')} # Length is in meters

            # Specify multiple junctions in HFSS model
            n_junctions = 5
            for i in range(1, 1+n_junctions):
                pinfo.junctions[f'j{i}'] = {'Lj_variable' : f'Lj{i}',
                                            'rect'        : f'JJrect{i}',
                                            'line'        : f'JJline{i}',
                                            'length'      : parse_units('50um')}

    HFSS app connection settings
    -----------------------
        project_path  : str
            Directory path to the hfss project file. Should be the directory, not the file.
            default = None: Assumes the project is open, and thus gets the project based
            on `project_name`
        project_name  : str,  None
            Name of the project within the project_path. "None" will get the current active one.
        design_name   : str,  None
            Name of the design within the project. "None" will get the current active one.
        setup_name    : str,  None
            Name of the setup within the design. "None" will get the current active one.


    Additional init setting:
    -----------------------
        do_connect : True by default. Connect to HFSS


    HFSS desgin settings
    -----------------------
    describe junction parameters
        junc_rects    = None
            Name of junction rectangles in HFSS
        junc_lines    = None
            Name of lines in HFSS used to define the current orientation for each junction
        junc_LJ_names = None
            Name of junction inductance variables in HFSS.
            Note, DO NOT USE Global names that start with $.
        junc_lens     = None
            Junciton rect. length, measured in meters.

    """

    class _Dissipative:
        # TODO: remove and turn to dict

        def __init__(self):
            self.dielectrics_bulk = None
            self.dielectric_surfaces = None
            self.dielectric_MA_surfaces = None
            self.dielectric_MS_surfaces = None
            self.dielectric_SA_surfaces = None
            self.resistive_surfaces = None
            self.seams = None

    def __init__(self, project_path=None, project_name=None, design_name=None,
                 setup_name=None, do_connect=True):

        # Path: format path correctly to system convention
        self.project_path = str(Path(project_path)) \
            if not (project_path is None) else None
        self.project_name = project_name
        self.design_name = design_name
        self.setup_name = setup_name

        # HFSS desgin: describe junction parameters
        # TODO: introduce modal labels
        self.junctions = Dict()  # See above for help
        self.ports = Dict()

        # Dissipative HFSS volumes and surfaces
        self.dissipative = self._Dissipative()
        self.options = config.ansys

        # Conected to HFSS variable
        self.app = None
        self.desktop = None
        self.project = None
        self.design = None
        self.setup = None

        if do_connect:
            self.connect()

    _Forbidden = ['app', 'design', 'desktop', 'project',
                  'dissipative', 'setup', '_Forbidden', 'junctions']

    def save(self):
        '''
        Return a dicitonary to save
        '''
        return dict(
            pinfo=pd.Series(get_instance_vars(self, self._Forbidden)),
            dissip=pd.Series(get_instance_vars(self.dissipative)),
            options=pd.Series(get_instance_vars(self.options)),
            junctions=pd.DataFrame(self.junctions),
            ports=pd.DataFrame(self.ports),
        )

    def connect(self):
        """
        Connect to Ansys Desktop.
        """
        logger.info('Connecting to Ansys Desktop API...')

        self.app, self.desktop, self.project = ansys.load_ansys_project(
            self.project_name, self.project_path)
        self.project_name = self.project.name
        self.project_path = self.project.get_path()

        # Design
        if self.design_name is None:
            self.design = self.project.get_active_design()
            self.design_name = self.design.name
            logger.info(f'\tOpened active design\n\
\tDesign:    {self.design_name} [Solution type: {self.design.solution_type}]')
        else:

            try:
                self.design = self.project.get_design(self.design_name)
                logger.info(f'\tOpened active design\n\
\tDesign:    {self.design_name} [Solution type: {self.design.solution_type}]')

            except Exception as e:
                _traceback = sys.exc_info()[2]
                logger.error(f"Original error \N{loudly crying face}: {e}\n")
                raise(Exception(' Did you provide the correct design name?\
                    Failed to pull up design. \N{loudly crying face}').with_traceback(_traceback))

        # Setup
        try:
            setup_names = self.design.get_setup_names()

            if len(setup_names) == 0:
                logger.warning('\tNo design setup detected.')
                if self.design.solution_type == 'Eigenmode':
                    logger.warning('\tCreating eigenmode default setup one.')
                    setup = self.design.create_em_setup()
                    self.setup_name = setup.name
                elif self.design.solution_type == 'DrivenModal':
                    setup = self.design.create_dm_setup()  # adding a driven modal design
                    self.setup_name = setup.name
            else:
                if self.setup_name not in setup_names:
                    logger.warning('\tUser specified design setup does not exist. Utilizing the default satup.')
                    self.setup_name = setup_names[0]

            # get the actual setup if there is one
            self.get_setup(self.setup_name)

        except Exception as e:

            _traceback = sys.exc_info()[2]
            logger.error(f"Original error \N{loudly crying face}: {e}\n")
            raise Exception(' Did you provide the correct setup name?\
                        Failed to pull up setup. \N{loudly crying face}').with_traceback(_traceback)

        # Finalize
        self.project_name = self.project.name
        self.design_name = self.design.name

        logger.info(
            '\tConnection to Ansys established successfully. \N{grinning face} \n')

        return self

    def get_setup(self, name):
        """
        Connects to a specific setup for the design.
        Sets  self.setup and self.setup_name.
        If Name is
        """
        if name is None:
            return None
        else:
            self.setup = self.design.get_setup(name=self.setup_name)
            if self.setup is None:
                logger.error(f"Could not retrieve setup: {self.setup_name}\n \
                               Did you give the right name? Does it exist?")

            self.setup_name = self.setup.name
            logger.info(
                f'\tOpened setup `{self.setup_name}`  ({type(self.setup)})')
            return self.setup

    def check_connected(self):
        """Checks if fully connected including setup
        """
        return\
            (self.setup is not None) and\
            (self.design is not None) and\
            (self.project is not None) and\
            (self.desktop is not None) and\
            (self.app is not None)

    def disconnect(self):
        '''
        Disconnect from existing HFSS design.
        '''
        assert self.check_connected() is True,\
            "It does not appear that you have connected to HFSS yet.\
            Use the connect()  method. \N{nauseated face}"
        self.project.release()
        self.desktop.release()
        self.app.release()
        ansys.release()

    # UTILITY FUNCTIONS

    def get_dm(self):
        '''
        Utility shortcut function to get the design and modeler.

        .. code-block:: python
            oDesign, oModeler = projec.get_dm()
        '''
        return self.design, self.design.modeler

    def get_all_variables_names(self):
        """Returns array of all project and local design names."""
        return self.project.get_variable_names() + self.design.get_variable_names()

    def get_all_object_names(self):
        """Returns array of strings"""
        o_objects = []
        for s in ["Non Model", "Solids", "Unclassified", "Sheets", "Lines"]:
            o_objects += self.design.modeler.get_objects_in_group(s)
        return o_objects
    
    def get_all_object_names_by_group(self, group):
        """Returns array of strings"""
        o_objects = []
        o_objects += self.design.modeler.get_objects_in_group(group)
        return o_objects

    def validate_junction_info(self):
        """ Validate that the user has put in the junction info correctly.
        Do no also forget to check the length of the rectangles/line of
        the junction if you change it.
        """

        all_variables_names = self.get_all_variables_names()
        all_object_names = self.get_all_object_names()

        for jjnm, jj in self.junctions.items():

            assert jj['Lj_variable'] in all_variables_names,\
                """pyEPR ProjectInfo user error found \N{face with medical mask}:
                Seems like for junction `%s` you specified a design or project
                variable for `Lj_variable` that does not exist in HFSS by the name:
                 `%s` """ % (jjnm, jj['Lj_variable'])

            for name in ['rect', 'line']:

                assert jj[name] in all_object_names, \
                    """pyEPR ProjectInfo user error found \N{face with medical mask}:
                    Seems like for junction `%s` you specified a %s that does not exist
                    in HFSS by the name: `%s` """ % (jjnm, name, jj[name])

        # TODO: Check the length of the rectangle
